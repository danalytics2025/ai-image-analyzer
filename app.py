import streamlit as stfrom PIL import Imageimport piexifimport numpy as npimport cv2import osdef metadata_check(img):    try:        exif = img.info.get('exif')        if not exif: return 20        exif_dict = piexif.load(exif)        for tag in exif_dict:            for val in exif_dict[tag]:                v = val                if isinstance(val, bytes):                    try:                        v = val.decode()                    except Exception:                        v = val                if "ai" in str(v).lower() or "artificial" in str(v).lower():                    return 50        return 0    except Exception:        return 15def ela_check(img):    temp_fname = "temp_resaved_ela.jpg"    img.save(temp_fname, "JPEG", quality=90)    resaved = Image.open(temp_fname)    ela_image = Image.blend(img, resaved, alpha=0.7)    ela_arr = np.array(ela_image, dtype=np.float32)    orig_arr = np.array(img, dtype=np.float32)    error = np.abs(ela_arr - orig_arr)    score = np.mean(error)    try:        os.remove(temp_fname)    except Exception:        pass    return min(max(int(score), 0), 100)def clone_check(img):    arr = np.array(img)    gray = cv2.cvtColor(arr, cv2.COLOR_RGB2GRAY)    h, w = gray.shape    block = 30    dups = 0    for y1 in range(0, h-block, block):        for x1 in range(0, w-block, block):            patch = gray[y1:y1+block, x1:x1+block]            for y2 in range(y1+block, h-block, block):                for x2 in range(x1+block, w-block, block):                    patch2 = gray[y2:y2+block, x2:x2+block]                    diff = np.sum(np.abs(patch.astype(int) - patch2.astype(int)))                    if diff < (block*block*3):                        dups += 1    return min(dups*2, 100)def openai_vision_check(img, api_key):    import openai    openai.api_key = api_key  # הגדרה גלובלית של ה-API KEY    img.save("upload_tmp.png")    with open("upload_tmp.png", "rb") as fp:        response = openai.chat.completions.create(            model="gpt-4-vision-preview",            messages=[                {"role": "user", "content": [                    {"type": "text", "text": "האם לדעתך זו תמונה שנוצרה בבינה מלאכותית? החזר 70 אם כן, 35 אם אולי, 0 אם לא."},                    {"type": "image_url", "image_url": {"url": "attachment://photo.png"}}                ]}            ],            max_tokens=30,            files={"photo.png": fp}        )    os.remove("upload_tmp.png")    reply = response.choices[0].message.content    if "70" in reply:        return 70    if "35" in reply:        return 35    return 0st.title("🔍 בדיקת תמונה: פורנזיקה ובינה מלאכותית")st.markdown("""• **בדיקות פורנזיה (אמיתיות):** מטאדאטה, ELA, איתור שיבוט  • **(אופציונלי):** ניתוח תמונה ענני באמצעות OpenAI Vision (אם הכנסת API Key)""")uploaded = st.file_uploader("בחר תמונה", type=['jpg','jpeg','png'])api_key = st.text_input("הזן OpenAI API KEY (אופציונלי אם תרצה בדיקת בינה)")if uploaded:    img = Image.open(uploaded).convert("RGB")    st.image(img)    with st.spinner("מבצע בדיקות..."):        meta_score = metadata_check(img)        ela_score = ela_check(img)        clone_score = clone_check(img)        ai_score = 0        vision_ok = False        if api_key.strip() != "":            if api_key.strip().startswith("sk-"):                try:                    ai_score = openai_vision_check(img, api_key.strip())                    vision_ok = True                except Exception as e:                    ai_score = 0                    st.warning("⚠️  קריאת OpenAI נכשלה. בדוק את ה-API KEY וודא שיש לך הרשאות וקרדיט במנוי שלך.")            else:                st.warning("⚠️  ה-API KEY שהוזן לא חוקי. חייב להתחיל ב-sk-. בדוק שנכון.")        scores = [meta_score, ela_score, clone_score, ai_score]        conf = np.mean([s for s in scores if s >= 0])    with st.expander("📊 פירוט בדיקות:"):        st.write(            f"**Metadata:** {meta_score} | **ELA:** {ela_score} | **Clone:** {clone_score}" +            (f" | **OpenAI Vision:** {ai_score}" if vision_ok else " | **OpenAI Vision:** לא בוצע")        )    if conf >= 50:        st.error(f"תוצר בינה מלאכותית ודאי ({conf:.1f}%)")    elif conf >= 25:        st.warning(f"יתכן תוצר AI ({conf:.1f}%)")    else:        st.success(f"תמונה אמיתית ({conf:.1f}%)")    st.info("""    ⚠️ בדיקות פורנזיות + כלי בינה (אם הכנסת מפתח).     מיועד להדגמה וחינוך - לא תחליף לבדיקת מומחה / פורנזיקה משפטית.    """)else:    st.markdown("> 🖼️ העלה תמונה כדי להתחיל.")